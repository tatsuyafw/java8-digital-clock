apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'java'

sourceCompatibility = 1.8
version = '1.0'
/*
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}
*/

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// The following codes is for packaging of javafx application.
// See: http://patrickmoule.net/2012/12/16/building-and-packaging-of-javafx-applications-with-gradle/
mainClassName = "Clock"

def javaFxHome = "${System.properties['java.home']}";
//There seems to be an issue with Gradle detecting the JDK.
//So, we have to help a wee bit to find the ant-javafx.jar
//This may be different on your system.
def antJavaFxJar = "$javaFxHome/../lib/ant-javafx.jar"

def vendor = "Tatsuya Hoshino"
def version = 0.1
def title = "Digital Clock"

//this one works with file dependencies. If you prefer
//e.g. Maven, feel free to change.
def libFolder = 'lib'
def includePattern = '*.jar'

configurations {
    //we do not want to have jfxrt.jar in the classpath when creating the jar,
    //therefore a seperate configuration is required
    providedCompile
}

/*

dependencies {
   providedCompile files("$javaFxHome/lib/jfxrt.jar")
   compile fileTree(dir: libFolder, include: includePattern)
}

compileJava {
   //add required JavaFX libs to compile classpath
   sourceSets.main.compileClasspath += configurations.providedCompile
}

run {
   //add required JavaFX libs to runtime classpath
   classpath += configurations.providedCompile
}

//ant configuration for creating double-clickable, self-contained JAR
ant.importBuild 'javafx.fxml'
ant.antJavaFxJar = antJavaFxJar
ant.mainClassName = mainClassName
ant.fallbackClassName = 'com.javafx.main.NoJavaFXFallback'
ant.distDir = libsDir
ant.distName = jar.archiveName;
ant.resourceDir = libFolder
ant.resourceIncludePattern = includePattern
ant.applicationTitle = title
ant.applicationVendor = vendor
ant.applicationVersion = version
ant.applicationClasses = sourceSets.main.output.classesDir
ant.applicationResources = sourceSets.main.output.resourcesDir

//clear existing task actions and call ant task
jar {
   // reset actions
   actions = []

   doLast {
       javafxjar.execute(); // <-- the task described in javafx.xml
}

//create some smarter looking start scripts

startScripts {
   doLast {
       //unixScript.text = "java -jar ../lib/$jar.archiveName"
       //windowsScript.text = "java -jar ..\\lib\\$jar.archiveName"
   }
}
*/