apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'java'

// The following codes is for packaging of javafx application.
// See: http://patrickmoule.net/2012/12/16/building-and-packaging-of-javafx-applications-with-gradle/
def libFolder = 'lib'
def includePattern = '*.jar'
def javaFxHome = "${System.properties['java.home']}";
def antJavaFxJar = "$javaFxHome/../lib/ant-javafx.jar"
def vendor = "Tatsuya Hoshino"
def version = 0.1
def title = "Digital Clock"

sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

configurations {
    providedCompile
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile fileTree(dir: libFolder, include: includePattern)
    providedCompile files("$javaFxHome/lib/jfxrt.jar")
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

mainClassName = "common.Clock"

compileJava {
   sourceSets.main.compileClasspath += configurations.providedCompile
}


run {
   //add required JavaFX libs to runtime classpath
   classpath += configurations.providedCompile
}


//ant configuration for creating double-clickable, self-contained JAR
ant.importBuild 'javafx.xml'
ant.antJavaFxJar = antJavaFxJar
ant.mainClassName = mainClassName
ant.fallbackClassName = 'com.javafx.main.NoJavaFXFallback'
ant.distDir = libsDir
ant.distName = jar.archiveName;
ant.resourceDir = libFolder
ant.resourceIncludePattern = includePattern
ant.applicationTitle = title
ant.applicationVendor = vendor
ant.applicationVersion = version
ant.applicationClasses = sourceSets.main.output.classesDir
ant.applicationResources = sourceSets.main.output.resourcesDir


//clear existing task actions and call ant task
jar {
   actions = []

   doLast {
       javafxjar.execute();
   }
}

/*
//create some smarter looking start scripts
startScripts {
   doLast {
       //unixScript.text = "java -jar ../lib/$jar.archiveName"
       //windowsScript.text = "java -jar ..\\lib\\$jar.archiveName"
   }
}
*/